<?php


namespace Tests\Feature\Services;


use App\Classes\FacebookAdsApiMock;
use App\Models\AdsAccount;
use App\Models\SocialAccount;
use App\Services\Social\FacebookAdsService;
use Database\Factories\PageFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class FacebookAdsServiceTest extends TestCase
{

    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_update_user_data()
    {
        $socialAccount = SocialAccount::create([
            'provider_name' => 'facebookAds',
            'provider_id' => '285367600341901',
            'full_name' => 'Sana Dabbous'
        ]);

        $adsAccount = AdsAccount::create([
            'social_account_id' => $socialAccount->id,
            'act_id' => 'act_1304249843046502',
            'account_id' => '1304249843046502',
            'name' => 'Yuseph Breik'
        ]);

        $service = new FacebookAdsService($socialAccount);
        $service->setApi(new FacebookAdsApiMock);
        $service->updateUserData();

        $this->assertDatabaseCount('social_accounts', 1);

        // ADS ACCOUNTS
        $this->assertDatabaseCount('ads_accounts', 1);
        $this->assertDatabaseHas('ads_accounts', ['name' => 'Yuseph Breik After Update']);
        $this->assertDatabaseMissing('ads_accounts', ['name' => 'Sana Dabbous']);

        // ADS DATA
        $this->assertDatabaseCount('ads_data', 25);
        $this->assertDatabaseHas('ads_data', [
            'campaign_id' => "23847657872210619",
            'campaign_name' => "Campaign name after update",
            'impressions' => 199,
            'ctr' => "1.005025",
            'cpc' => "0.045",
            'account_currency' => "EUR",
            'clicks' => 5,
            'inline_link_clicks' => 3,
            'ads_account_id' => $adsAccount->id,
            'date' => "2021-06-28",
            'cpp' => "0.452261",
            'cpm' => "0.452261",
            'spend' => "0.09",
            'reach' => 199,
            'converted_product_value' => 0 // TODO:: explore this - absent in json
        ]);

        // POSTS
        $this->assertDatabaseCount('posts', 3);
        $this->assertDatabaseHas('posts', [
            'post_id'        => "108132398116318_321011260161763",
            'image'          => "https://post_image",
            'text'           => "after update text",
            'created_date'   => "2022-04-01",
            'likes_count'    => 63,
            'comments_count' => 10,
            'engaged'        => 414,
            'clicks'         => 502,
            'ads_account_id' => $adsAccount->id,
        ]);
    }

    public function test_doubled_of_update_user_data()
    {
        // TODO:: create likes
        $socialAccount = SocialAccount::create([
            'provider_name' => 'facebookAds',
            'provider_id' => '285367600341901',
            'full_name' => 'Sana Dabbous'
        ]);

        $adsAccount = AdsAccount::create([
            'social_account_id' => $socialAccount->id,
            'act_id' => 'act_1304249843046502',
            'account_id' => '1304249843046502',
            'name' => 'Before Update'
        ]);

        $service = new FacebookAdsService($socialAccount);
        $service->setApi(new FacebookAdsApiMock);
        $service->updateUserData();

        // repeat data update
        $socialAccount->last_imported_at = null;
        $socialAccount->save();

        $service = new FacebookAdsService($socialAccount);
        $service->setApi(new FacebookAdsAPIMock);
        $service->updateUserData();

        $this->assertDatabaseCount('social_accounts', 1);
        $this->assertDatabaseCount('ads_accounts', 1);
        $this->assertDatabaseCount('ads_data', 25);
        $this->assertDatabaseCount('posts', 3);
    }
}
